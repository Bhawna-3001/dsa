//knapsack problem

/*
class Item {
    int value, weight;
    Item(int x, int y){
        this.value = x;
        this.weight = y;
    }
}
*/
class itemComparator implements Comparator<Item>{
    public int compare(Item a,Item b){
        double r=(double)a.value/(double)a.weight;
        double s=(double)b.value/(double)b.weight;
        //arranging according to per value
        if(r<s){
            return 1;
        }else if(s<r){return -1;}
        return 0;
    }
}
class Solution
{
    //Function to get the maximum total value in the knapsack.
    double fractionalKnapsack(int W, Item arr[], int n) 
    {
        // Your code here
        Arrays.sort(arr,new itemComparator());
        int current=0;
        double finalcost=0.0;
        for(int i=0;i<n;i++){
            if(current+arr[i].weight<=W){
                current+=arr[i].weight;
                finalcost+=(double)arr[i].value;
            }else{
                int remain=W-current;
                finalcost+=((double)arr[i].value/(double)arr[i].weight)*(double)remain;
                break;
            }
        }
        return finalcost;
    }
}
