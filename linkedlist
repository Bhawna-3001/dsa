//l.descendingIterator
        LinkedList<String> l=new LinkedList<String>();
        l.add("a");
        l.add("b");
        Iterator x = l.descendingIterator();
        while(x.hasNext()){
            System.out.println(x.next());
        }
        //output: ba
___________________________________________
//finding miidle of linkedlist(tortiseHare method)
//increase slow by 1 step and fast by 2 steps
class Solution {
    public ListNode middleNode(ListNode head) {
        ListNode slow=head;
        ListNode fast=head;
        while(fast!=null && fast.next!=null){
            slow=slow.next;
            fast=fast.next.next;
        }
        return slow;
    }
}
________________________________
//reverse singly ll using recursion

    public ListNode reverse(ListNode head, ListNode temp){
        if(head!=null){
            ListNode parent=head.next;
            head.next=temp;
            temp=head;
            head=parent;
            temp=reverse(head,temp);
            //parent=head.next;
        }
        return temp;
    }
    public ListNode reverseList(ListNode head) {
        ListNode temp=null;
        return reverse(head,temp);
___________________________________________________
