#
  recursive solution--------
f(ind, prev_index){

    if(ind == n)
        return 0

    notTake = 0 + f(ind + 1, prev_index)

    if(prev_index == -1 || arr[ind]>arr[prev_index]){
        take = 1 + f(ind + 1, ind)
    }

    return max(notTake, take)
}
time: O(2^n)
space: o(n)
_________________
  #memoization
  public long check(int nums[],int ind,int prev,long dp[][]){
        if(ind==nums.length){
            return 0;
        }
        if(dp[ind][prev+1]!=(long)-1){
            return dp[ind][prev+1];
        }
        long len=0+check(nums,ind+1,prev,dp);
        if(prev==-1 || nums[ind]>nums[prev]){
            len=Math.max(len,1+check(nums,ind+1,ind,dp));
        }
        
        return dp[ind][prev+1]=len;
    }
    public int lengthOfLIS(int[] nums) {
        int n=nums.length;
        long dp[][]=new long[n][n+1];
        for(long row[]:dp){
            Arrays.fill(row,-1);
        }
        return (int)check(nums,0,-1,dp);
    }
}
time:(n*n)
space: O(n*n)+O(n) [for stack space]
  ______________________________________________
  # printing elements of longest increasing subseq 

  import java.util.*;

class TUF{
static int longestIncreasingSubsequence(int arr[], int n){
    
    int[] dp=new int[n];
    Arrays.fill(dp,1);
    int[] hash=new int[n];
    Arrays.fill(hash,1);
    
    for(int i=0; i<=n-1; i++){
        
        hash[i] = i; // initializing with current index
        for(int prev_index = 0; prev_index <=i-1; prev_index ++){
            
            if(arr[prev_index]<arr[i] && 1 + dp[prev_index] > dp[i]){
                dp[i] = 1 + dp[prev_index];
                hash[i] = prev_index;
            }
        }
    }
    
    int ans = -1;
    int lastIndex =-1;
    
    for(int i=0; i<=n-1; i++){
        if(dp[i]> ans){
            ans = dp[i];
            lastIndex = i;
        }
    }
    
    ArrayList<Integer> temp=new ArrayList<>();
    temp.add(arr[lastIndex]);
    
    while(hash[lastIndex] != lastIndex){ // till not reach the initialization value
        lastIndex = hash[lastIndex];
        temp.add(arr[lastIndex]);    
    }
    
    // reverse the array 
    
    System.out.print("The subsequence elements are ");
    
    for(int i=temp.size()-1; i>=0; i--){
        System.out.print(temp.get(i)+" ");
    }
    System.out.println();
    
    return ans;
}

public static void main(String args[]) {
	
	int arr[] = {10,9,2,5,3,7,101,18};
	
	int n = arr.length;
	longestIncreasingSubsequence(arr,n);
	
}
}
time: O(n*n)
  space: o(n)
    ___________________________________________________
    
