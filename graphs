//to convert adjacency matrix to list:
public int findCircleNum(int[][] isConnected) {
        //converting adj matrix to dj list
        ArrayList<ArrayList<Integer>> adjlt= new ArrayList<ArrayList<Integer>>();
        int n=isConnected.length;
        for(int i=0;i<n;i++){
            adjlt.add(new ArrayList<Integer>());
        }
        for(int i=0;i<n;i++){
            for (int j=0;j<n;j++){
                if(isConnected[i][j]==1 && i!=j){
                    adjlt.get(i).add(j);
                    // adjlt.get(j).add(i);
                }
            }
        }
}
____________________________________________________
//BFS 
class Solution {
    // Function to return Breadth First Traversal of given graph.
    //v: no of nodes
    public ArrayList<Integer> bfsOfGraph(int V, ArrayList<ArrayList<Integer>> adj) {
        // Code here
        ArrayList<Integer> bfs= new ArrayList<>();
        Queue<Integer> q=new LinkedList<>();
        boolean visited[] = new boolean[V];
        
        q.add(0);
        visited[0]=true;
        while(!q.isEmpty()){
            int node=q.poll();
            bfs.add(node);
            for(Integer lt:adj.get(node)){
                if(visited[lt]==false){
                    visited[lt]=true;
                    q.add(lt);
                }
            }
        }
        return bfs;
    }
}
TIME: O(N) + O(2E)....O(n+e)
space: O(3N)...vis array, queue, res arraylist
_____________________________________________________

//dfs gfg
class Solution {
    public static void dfs(ArrayList<ArrayList<Integer>> adj,int node, boolean vis[], ArrayList<Integer> lt){
        vis[node]=true;
        lt.add(node);
        for(Integer l:adj.get(node)){
            if(vis[l]==false){
                dfs(adj,l,vis,lt);
            }
        }
    }
    // Function to return a list containing the DFS traversal of the graph.
    //main code
    public ArrayList<Integer> dfsOfGraph(int V, ArrayList<ArrayList<Integer>> adj) {
        boolean vis[]=new boolean[V+1];
        int size=V+1;
        vis[0]=true;
        ArrayList<Integer> lt=new ArrayList<>();
        dfs(adj,0,vis,lt);
        return lt;
    }
}
_______________________________________________
# no of provinces
class Solution {
    private void dfs(int node, ArrayList<ArrayList<Integer>> adjlt, boolean vis[]){
        vis[node]=true;
        for(Integer lt:adjlt.get(node)){
            if(vis[lt]==false){
                dfs(lt,adjlt,vis);
            }
        }
    }
    public int findCircleNum(int[][] isConnected) {
        //converting adj matrix to dj list
        ArrayList<ArrayList<Integer>> adjlt= new ArrayList<ArrayList<Integer>>();
        int n=isConnected.length;
        for(int i=0;i<n;i++){
            adjlt.add(new ArrayList<Integer>());
        }
        for(int i=0;i<n;i++){
            for (int j=0;j<n;j++){
                if(isConnected[i][j]==1 && i!=j){
                    adjlt.get(i).add(j);
                    // adjlt.get(j).add(i);
                }
            }
        }
        boolean vis[] =new boolean[n];
        //vis[0]=true;
        int c=0;
        for(int i=0;i<n;i++){
            if(vis[i]==false){
                c++;
                dfs(i,adjlt,vis);
            }
        }
        return c;
    }
}
time: O(N) + O(V+2E), Where O(N) is for outer loop and inner loop runs in total a single DFS over entire graph, and we know DFS takes a time of O(V+2E). 
Space Complexity: O(N) + O(N),Space for recursion stack space and visited array.

________________________________________________
#rotten oranges
import java.util.*;
class TUF{
public static int orangesRotting(int[][] grid) {
        if(grid == null || grid.length == 0) return 0;
        int rows = grid.length;
        int cols = grid[0].length;
        Queue<int[]> queue = new LinkedList<>();
        int count_fresh = 0;
        //Put the position of all rotten oranges in queue
        //count the number of fresh oranges
        for(int i = 0 ; i < rows ; i++) {
            for(int j = 0 ; j < cols ; j++) {
                if(grid[i][j] == 2) {
                    queue.offer(new int[]{i , j});
                }
                if(grid[i][j] != 0) {
                    count_fresh++;
                }
            }
        }
       
        if(count_fresh == 0) return 0;
        int countMin = 0, cnt = 0;
        int dx[] = {0, 0, 1, -1};
        int dy[] = {1, -1, 0, 0};
        
        //bfs starting from initially rotten oranges
        while(!queue.isEmpty()) {
            int size = queue.size();
            cnt += size; 
            for(int i = 0 ; i < size ; i++) {
                int[] point = queue.poll();
                for(int j = 0;j<4;j++) {
                    int x = point[0] + dx[j];
                    int y = point[1] + dy[j];
                    
                    if(x < 0 || y < 0 || x >= rows || y >= cols || grid[x][y] == 0 || 
                    grid[x][y] == 2) continue;
                    
                    grid[x][y] = 2;
                    queue.offer(new int[]{x , y});
                }
            }
            if(queue.size() != 0) {
                countMin++;
            }
        }
        return count_fresh == cnt ? countMin : -1;
    }
    public static void main(String args[])
    {
        int arr[][]={ {2,1,1} , {1,1,0} , {0,1,1} };
        int rotting = orangesRotting(arr);
        System.out.println("Minimum Number of Minutes Required "+rotting);
    }
}
Time Complexity: O ( n x n ) x 4    

Reason: Worst-case – We will be making each fresh orange rotten in the grid and for each rotten orange will check in 4 directions

Space Complexity: O ( n x n )

Reason: worst-case –  If all oranges are Rotten, we will end up pushing all rotten oranges into the Queue data structure
______________________________________________________________________
#flood fill
class Solution {
    private void dfs(int row,int col,int[][] image, int[][] matrix, int delr[], int delc[], int color, int oc){
        matrix[row][col]=color;
        int r=image.length;
        int c= image[0].length;
        for(int i=0;i<4;i++){
            int nrow=row+delr[i];
            int ncol=col+delc[i];
            if(nrow>=0 && ncol>=0 && nrow<r && ncol<c && image[nrow][ncol]==oc && matrix[nrow][ncol]!=color){
                dfs(nrow,ncol,image,matrix,delr,delc,color,oc);
            }
        }
    }
    public int[][] floodFill(int[][] image, int sr, int sc, int color) {
        int matrix[][]=image;
        int delr[]={-1,0,1,0};
        int delc[]={0,1,0,-1};
        int oc=image[sr][sc];
        dfs(sr,sc,image,matrix,delr,delc,color,oc);
        return matrix;
    }
}
Time Complexity: O(NxM + NxMx4) ~ O(N x M)

For the worst case, all of the pixels will have the same colour, so DFS function will be called for (N x M) nodes and for every node we are traversing for 4 neighbours, so it will take O(N x M x 4) time.

Space Complexity: O(N x M) + O(N x M)

O(N x M) for copied input array and recursive stack space takes up N x M locations at max. 
__________________________________________________________
//dfs complete code
import java.util.*;
class Solution {
    
    public static void dfs(int node, boolean vis[], ArrayList<ArrayList<Integer>> adj, 
    ArrayList<Integer> ls) {
        
        //marking current node as visited
        vis[node] = true;
        ls.add(node);
        
        //getting neighbour nodes
        for(Integer it: adj.get(node)) {
            if(vis[it] == false) {
                dfs(it, vis, adj, ls);
            }
        }
    }
    // Function to return a list containing the DFS traversal of the graph.
    public ArrayList<Integer> dfsOfGraph(int V, ArrayList<ArrayList<Integer>> adj) {
        //boolean array to keep track of visited vertices
        boolean vis[] = new boolean[V+1];
        vis[0] = true; 
        ArrayList<Integer> ls = new ArrayList<>();
        dfs(0, vis, adj, ls); 
        return ls; 
    }
    
    public static void main(String args[]) {

        ArrayList < ArrayList < Integer >> adj = new ArrayList < > ();
        for (int i = 0; i < 5; i++) {
            adj.add(new ArrayList < > ());
        }
        adj.get(0).add(2);
        adj.get(2).add(0);
        adj.get(0).add(1);
        adj.get(1).add(0);
        adj.get(0).add(3);
        adj.get(3).add(0);
        adj.get(2).add(4);
        adj.get(4).add(2);
        
        Solution sl = new Solution(); 
        ArrayList < Integer > ans = sl.dfsOfGraph(5, adj);
        int n = ans.size(); 
        for(int i = 0;i<n;i++) {
            System.out.print(ans.get(i)+" "); 
        }
    }
}
__________________________________________
//bipartite graph or not
class Solution {
    private boolean bfs(Queue<Integer> q, int graph[][],int color[]){
        while(!q.isEmpty()){
            int node=q.peek();
            q.remove();
            for(int i=0;i<graph[node].length;i++){
                if(color[graph[node][i]]==color[node]){
                    return false;
                }
                else if(color[graph[node][i]]==-1){
                    if(color[node]==0){
                        color[graph[node][i]]=1;
                        q.add(graph[node][i]);
                    }
                    else{
                        color[graph[node][i]]=0;
                        q.add(graph[node][i]);
                    }
                }
            }
        }
        return true;
    }
    public boolean isBipartite(int[][] graph) {
        //graph=[[1,2,3],[0,2],[0,1,3],[0,2]];
        int n=graph.length;
        int color[]=new int[n];
        for(int i=0;i<n;i++){color[i]=-1;}
        Queue<Integer> q = new LinkedList<Integer>();
        for(int i=0;i<n;i++){
            if(color[i]==-1){
                q.add(i);
                color[i]=0;
                if(bfs(q,graph,color)==false){
                    return false;
                }
            }
        }
        return true;
    }
}
________________________________________
//detecting cycle in an indirected graph using bfs
class Solution {
    private boolean bfs(Queue<Integer> q, ArrayList<ArrayList<Integer>> adj, int vis[],boolean ans){
        while(!q.isEmpty()){
            int node=q.peek();
            q.remove();
            for(Integer n:adj.get(node)){
                
                if (q.contains(n) && vis[n]==1){
                    ans=true;
                    break;
                }
                else if(vis[n]==0){
                    q.add(n);
                    vis[n]=1;
                }
            }
            if(ans){
                break;
            }
        }
        return ans;
    }
    // Function to detect cycle in an undirected graph.
    public boolean isCycle(int V, ArrayList<ArrayList<Integer>> adj) {
        // Code here
        boolean ans=false;
        Queue<Integer> q=new LinkedList<>();
        int vis[]=new int[V];
        for(int i=0;i<V;i++){
            if(vis[i]==0){
                vis[i]=1;
                q.add(i);
                ans=bfs(q,adj,vis,ans);
                if(ans){
                    return ans;
                }
            }
        }
        return ans;
    }
}
____________________________________________________
//topological sorting using dfs
class Solution
{
    private static void dfs(int node,int vis[],ArrayList<ArrayList<Integer>> adj,Stack<Integer> s){
        vis[node]=1;
        for(Integer i:adj.get(node)){
            if(vis[i]==0){
                dfs(i,vis,adj,s);
            }
        }
        s.push(node);
    }
    //Function to return list containing vertices in Topological order. 
    static int[] topoSort(int V, ArrayList<ArrayList<Integer>> adj) 
    {
        // add your code here
        int vis[]=new int[V];
        Stack<Integer> s=new Stack<Integer>();
        for(int i=0;i<V;i++){
            if(vis[i]==0){
                dfs(i,vis,adj,s);
            }
        }
        int ans[]=new int[V];
        for(int i=0;i<V;i++){
            ans[i]=s.pop();
        }
        return ans;
    }
}
_________________________________________
//topological sorting using bfs(kahn algo)
class Solution {
    // Function to return list containing vertices in Topological order.
    static int[] topoSort(int V, ArrayList<ArrayList<Integer>> adj) {
        int indegree[] = new int[V];
        for (int i = 0; i < V; i++) {
            for (int it : adj.get(i)) {
                indegree[it]++;
            }
        }

        Queue<Integer> q = new LinkedList<Integer>();
        ;
        for (int i = 0; i < V; i++) {
            if (indegree[i] == 0) {
                q.add(i);
            }
        }

        int topo[] = new int[V];
        int i = 0;
        while (!q.isEmpty()) {
            int node = q.peek();
            q.remove();
            topo[i++] = node;
            // node is in your topo sort
            // so please remove it from the indegree

            for (int it : adj.get(node)) {
                indegree[it]--;
                if (indegree[it] == 0) {
                    q.add(it);
                }
            }
        }

        return topo;
    }
}

public class tUf {
    public static void main(String[] args) {
        int V = 6;
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < V; i++) {
            adj.add(new ArrayList<>());
        }
        adj.get(2).add(3);
        adj.get(3).add(1);
        adj.get(4).add(0);
        adj.get(4).add(1);
        adj.get(5).add(0);
        adj.get(5).add(2);

        int[] ans = Solution.topoSort(V, adj);
        for (int node : ans) {
            System.out.print(node + " ");
        }
        System.out.println("");
    }
}
___________________________________________
//cycle detection in DAG usng bfs
class Solution {
    public boolean isCyclic(int N, ArrayList<ArrayList<Integer>> adj) {
        // int topo[] = new int[N];
        int indegree[] = new int[N];
        for (int i = 0; i < N; i++) {
            for (Integer it : adj.get(i)) {
                indegree[it]++;
            }
        }

        Queue<Integer> q = new LinkedList<Integer>();
        for (int i = 0; i < N; i++) {
            if (indegree[i] == 0) {
                q.add(i);
            }
        }
        int cnt = 0;
        while (!q.isEmpty()) {
            Integer node = q.poll();
            cnt++;
            for (Integer it : adj.get(node)) {
                indegree[it]--;
                if (indegree[it] == 0) {
                    q.add(it);
                }
            }
        }
        if (cnt == N)
            return false;
        return true;
    }
}
___________________________________________
//dijkastra using priority queue
class pair{
    int node;
    int distance;
    public pair(int distance,int node){
        this.node = node;
        this.distance = distance;
    }
}
class Solution
{
    //Function to find the shortest distance of all the vertices
    //from the source vertex S.
    static int[] dijkstra(int V, ArrayList<ArrayList<ArrayList<Integer>>> adj, int S)
    {
        // Write your code here
        PriorityQueue<pair> q=new PriorityQueue<pair>((x,y)->x.distance - y.node);
        int dis[]=new int[V];
        for(int i=0;i<V;i++){dis[i]=(int)(1e9);}
        dis[S]=0;
        q.add(new pair(0,S));
        while(!q.isEmpty()){
            int d=q.peek().distance;
            int num=q.peek().node;
            q.remove();
            for(int i=0;i<adj.get(num).size();i++){
                int wt=adj.get(num).get(i).get(1);
                int n=adj.get(num).get(i).get(0);
                if(dis[n]>wt+d){
                    dis[n]=wt+d;
                    q.add(new pair(dis[n],n));
                }
            }
        }
        return dis;
    }
}
time comp: ElogV
________________________________________
//bellman ford algo
class Solution {
    static int[] bellman_ford(int V, ArrayList<ArrayList<Integer>> edges, int S) {
        // Write your code here
        int dis[]=new int[V];
        for (int i=0;i<V;i++){
            dis[i]=(int)(1e8);
        }
        dis[S]=0;
        for(int i=0;i<V;i++){
            for(ArrayList<Integer> node: edges){
                int from=node.get(0);
                int to=node.get(1);
                int wt=node.get(2);
                if(dis[from]!=(int)(1e8) && dis[from]+wt<dis[to]){
                    dis[to]=dis[from]+wt;
                }
            }
        }
        for(ArrayList<Integer> node:edges){
            int from=node.get(0);
            int to=node.get(1);
            int wt=node.get(2);
            if(dis[from]!=(int)(1e8) && dis[from]+wt<dis[to]){
                dis[to]=dis[from]+wt;
                int arr[]=new int[1];
                arr[0]=-1;
                return arr;
            }
        }
        return dis;
    }
}
time comp: E*V
cannot be used with self loops
__________________________________________
//floyd warshall algo
class Solution
{
    public void shortest_distance(int[][] matrix)
    {
        // Code here 
        int n=matrix.length;
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(matrix[i][j]==-1){
                    matrix[i][j]=(int)(1e9);
                }
                if(i==j){
                matrix[i][j]=0;
                }
            }
        }
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                for(int k=0;k<n;k++){
                    matrix[j][k]=Math.min(matrix[j][k],matrix[j][i]+matrix[i][k]);
                }
            }
        }
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(matrix[i][j]==(int)(1e9)){
                    matrix[i][j]=-1;
                }
            }
        }
    }
}
can be used in case of self loops
