//BFS 
class Solution {
    // Function to return Breadth First Traversal of given graph.
    //v: no of nodes
    public ArrayList<Integer> bfsOfGraph(int V, ArrayList<ArrayList<Integer>> adj) {
        // Code here
        ArrayList<Integer> bfs= new ArrayList<>();
        Queue<Integer> q=new LinkedList<>();
        boolean visited[] = new boolean[V];
        
        q.add(0);
        visited[0]=true;
        while(!q.isEmpty()){
            int node=q.poll();
            bfs.add(node);
            for(Integer lt:adj.get(node)){
                if(visited[lt]==false){
                    visited[lt]=true;
                    q.add(lt);
                }
            }
        }
        return bfs;
    }
}

//dfs gfg
class Solution {
    public static void dfs(ArrayList<ArrayList<Integer>> adj,int node, boolean vis[], ArrayList<Integer> lt){
        vis[node]=true;
        lt.add(node);
        for(Integer l:adj.get(node)){
            if(vis[l]==false){
                dfs(adj,l,vis,lt);
            }
        }
    }
    // Function to return a list containing the DFS traversal of the graph.
    //main code
    public ArrayList<Integer> dfsOfGraph(int V, ArrayList<ArrayList<Integer>> adj) {
        // Code here
        boolean vis[]=new boolean[V+1];
        int size=V+1;
        vis[0]=true;
        ArrayList<Integer> lt=new ArrayList<>();
        dfs(adj,0,vis,lt);
        return lt;
    }
}

//dfs complete code
import java.util.*;
class Solution {
    
    public static void dfs(int node, boolean vis[], ArrayList<ArrayList<Integer>> adj, 
    ArrayList<Integer> ls) {
        
        //marking current node as visited
        vis[node] = true;
        ls.add(node);
        
        //getting neighbour nodes
        for(Integer it: adj.get(node)) {
            if(vis[it] == false) {
                dfs(it, vis, adj, ls);
            }
        }
    }
    // Function to return a list containing the DFS traversal of the graph.
    public ArrayList<Integer> dfsOfGraph(int V, ArrayList<ArrayList<Integer>> adj) {
        //boolean array to keep track of visited vertices
        boolean vis[] = new boolean[V+1];
        vis[0] = true; 
        ArrayList<Integer> ls = new ArrayList<>();
        dfs(0, vis, adj, ls); 
        return ls; 
    }
    
    public static void main(String args[]) {

        ArrayList < ArrayList < Integer >> adj = new ArrayList < > ();
        for (int i = 0; i < 5; i++) {
            adj.add(new ArrayList < > ());
        }
        adj.get(0).add(2);
        adj.get(2).add(0);
        adj.get(0).add(1);
        adj.get(1).add(0);
        adj.get(0).add(3);
        adj.get(3).add(0);
        adj.get(2).add(4);
        adj.get(4).add(2);
        
        Solution sl = new Solution(); 
        ArrayList < Integer > ans = sl.dfsOfGraph(5, adj);
        int n = ans.size(); 
        for(int i = 0;i<n;i++) {
            System.out.print(ans.get(i)+" "); 
        }
    }
}
__________________________________________
//bipartite graph or not
class Solution {
    private boolean bfs(Queue<Integer> q, int graph[][],int color[]){
        while(!q.isEmpty()){
            int node=q.peek();
            q.remove();
            for(int i=0;i<graph[node].length;i++){
                if(color[graph[node][i]]==color[node]){
                    return false;
                }
                else if(color[graph[node][i]]==-1){
                    if(color[node]==0){
                        color[graph[node][i]]=1;
                        q.add(graph[node][i]);
                    }
                    else{
                        color[graph[node][i]]=0;
                        q.add(graph[node][i]);
                    }
                }
            }
        }
        return true;
    }
    public boolean isBipartite(int[][] graph) {
        //graph=[[1,2,3],[0,2],[0,1,3],[0,2]];
        int n=graph.length;
        int color[]=new int[n];
        for(int i=0;i<n;i++){color[i]=-1;}
        Queue<Integer> q = new LinkedList<Integer>();
        for(int i=0;i<n;i++){
            if(color[i]==-1){
                q.add(i);
                color[i]=0;
                if(bfs(q,graph,color)==false){
                    return false;
                }
            }
        }
        return true;
    }
}
________________________________________
//detecting cycle in an indirected graph using bfs
class Solution {
    private boolean bfs(Queue<Integer> q, ArrayList<ArrayList<Integer>> adj, int vis[],boolean ans){
        while(!q.isEmpty()){
            int node=q.peek();
            q.remove();
            for(Integer n:adj.get(node)){
                
                if (q.contains(n) && vis[n]==1){
                    ans=true;
                    break;
                }
                else if(vis[n]==0){
                    q.add(n);
                    vis[n]=1;
                }
            }
            if(ans){
                break;
            }
        }
        return ans;
    }
    // Function to detect cycle in an undirected graph.
    public boolean isCycle(int V, ArrayList<ArrayList<Integer>> adj) {
        // Code here
        boolean ans=false;
        Queue<Integer> q=new LinkedList<>();
        int vis[]=new int[V];
        for(int i=0;i<V;i++){
            if(vis[i]==0){
                vis[i]=1;
                q.add(i);
                ans=bfs(q,adj,vis,ans);
                if(ans){
                    return ans;
                }
            }
        }
        return ans;
    }
}
____________________________________________________
//topological sorting using dfs
class Solution
{
    private static void dfs(int node,int vis[],ArrayList<ArrayList<Integer>> adj,Stack<Integer> s){
        vis[node]=1;
        for(Integer i:adj.get(node)){
            if(vis[i]==0){
                dfs(i,vis,adj,s);
            }
        }
        s.push(node);
    }
    //Function to return list containing vertices in Topological order. 
    static int[] topoSort(int V, ArrayList<ArrayList<Integer>> adj) 
    {
        // add your code here
        int vis[]=new int[V];
        Stack<Integer> s=new Stack<Integer>();
        for(int i=0;i<V;i++){
            if(vis[i]==0){
                dfs(i,vis,adj,s);
            }
        }
        int ans[]=new int[V];
        for(int i=0;i<V;i++){
            ans[i]=s.pop();
        }
        return ans;
    }
}
_________________________________________
//topological sorting using bfs(kahn algo)
class Solution {
    // Function to return list containing vertices in Topological order.
    static int[] topoSort(int V, ArrayList<ArrayList<Integer>> adj) {
        int indegree[] = new int[V];
        for (int i = 0; i < V; i++) {
            for (int it : adj.get(i)) {
                indegree[it]++;
            }
        }

        Queue<Integer> q = new LinkedList<Integer>();
        ;
        for (int i = 0; i < V; i++) {
            if (indegree[i] == 0) {
                q.add(i);
            }
        }

        int topo[] = new int[V];
        int i = 0;
        while (!q.isEmpty()) {
            int node = q.peek();
            q.remove();
            topo[i++] = node;
            // node is in your topo sort
            // so please remove it from the indegree

            for (int it : adj.get(node)) {
                indegree[it]--;
                if (indegree[it] == 0) {
                    q.add(it);
                }
            }
        }

        return topo;
    }
}

public class tUf {
    public static void main(String[] args) {
        int V = 6;
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < V; i++) {
            adj.add(new ArrayList<>());
        }
        adj.get(2).add(3);
        adj.get(3).add(1);
        adj.get(4).add(0);
        adj.get(4).add(1);
        adj.get(5).add(0);
        adj.get(5).add(2);

        int[] ans = Solution.topoSort(V, adj);
        for (int node : ans) {
            System.out.print(node + " ");
        }
        System.out.println("");
    }
}
___________________________________________
//cycle detection in DAG usng bfs
class Solution {
    public boolean isCyclic(int N, ArrayList<ArrayList<Integer>> adj) {
        // int topo[] = new int[N];
        int indegree[] = new int[N];
        for (int i = 0; i < N; i++) {
            for (Integer it : adj.get(i)) {
                indegree[it]++;
            }
        }

        Queue<Integer> q = new LinkedList<Integer>();
        for (int i = 0; i < N; i++) {
            if (indegree[i] == 0) {
                q.add(i);
            }
        }
        int cnt = 0;
        while (!q.isEmpty()) {
            Integer node = q.poll();
            cnt++;
            for (Integer it : adj.get(node)) {
                indegree[it]--;
                if (indegree[it] == 0) {
                    q.add(it);
                }
            }
        }
        if (cnt == N)
            return false;
        return true;
    }
}
