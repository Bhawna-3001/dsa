//to convert adjacency matrix to list:
public int findCircleNum(int[][] isConnected) {
        //converting adj matrix to dj list
        ArrayList<ArrayList<Integer>> adjlt= new ArrayList<ArrayList<Integer>>();
        int n=isConnected.length;
        for(int i=0;i<n;i++){
            adjlt.add(new ArrayList<Integer>());
        }
        for(int i=0;i<n;i++){
            for (int j=0;j<n;j++){
                if(isConnected[i][j]==1 && i!=j){
                    adjlt.get(i).add(j);
                    // adjlt.get(j).add(i);
                }
            }
        }
}
____________________________________________________
//BFS 
class Solution {
    // Function to return Breadth First Traversal of given graph.
    //v: no of nodes
    public ArrayList<Integer> bfsOfGraph(int V, ArrayList<ArrayList<Integer>> adj) {
        // Code here
        ArrayList<Integer> bfs= new ArrayList<>();
        Queue<Integer> q=new LinkedList<>();
        boolean visited[] = new boolean[V];
        
        q.add(0);
        visited[0]=true;
        while(!q.isEmpty()){
            int node=q.poll();
            bfs.add(node);
            for(Integer lt:adj.get(node)){
                if(visited[lt]==false){
                    visited[lt]=true;
                    q.add(lt);
                }
            }
        }
        return bfs;
    }
}
TIME: O(N) + O(2E)....O(n+e)
space: O(3N)...vis array, queue, res arraylist
-----------------------------------------------------------------------
2nd aaproach:
import java.lang.Math.*;
class pair{
    int row;
    int col;
    int time;
    pair(int row, int col, int time){
        this.row=row;
        this.col=col;
        this.time=time;
    }
}
class Solution {
    public int orangesRotting(int[][] grid) {
        Queue<pair> q=new LinkedList<>();
        int n=grid.length;
        int m=grid[0].length;
        int count=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==2){
                    q.add(new pair(i,j,0));
                }
                else if(grid[i][j]==1){
                    count++;
                }
            }
        }
        if(count==0){
            return 0;
        }
        int tm=0;
        int num=0;
        int delr[]={-1,0,1,0};
        int delc[]={0,1,0,-1};
        while(!q.isEmpty()){
            int row=q.peek().row;
            int col=q.peek().col;
            int t=q.peek().time;
            q.remove();
            tm=Math.max(tm,t);
            for(int i=0;i<4;i++){
                int r=row+delr[i];
                int c=col+delc[i];
                if(r>=0 && r<n && c>=0 && c<m && grid[r][c]==1){
                    grid[r][c]=2;
                    num++;
                    q.add(new pair(r,c,t+1));
                }
            }
        }
        if(num<count){
            return -1;
        }
        return tm;
    }
}
_____________________________________________________

//dfs gfg
class Solution {
    public static void dfs(ArrayList<ArrayList<Integer>> adj,int node, boolean vis[], ArrayList<Integer> lt){
        vis[node]=true;
        lt.add(node);
        for(Integer l:adj.get(node)){
            if(vis[l]==false){
                dfs(adj,l,vis,lt);
            }
        }
    }
    // Function to return a list containing the DFS traversal of the graph.
    //main code
    public ArrayList<Integer> dfsOfGraph(int V, ArrayList<ArrayList<Integer>> adj) {
        boolean vis[]=new boolean[V+1];
        int size=V+1;
        vis[0]=true;
        ArrayList<Integer> lt=new ArrayList<>();
        dfs(adj,0,vis,lt);
        return lt;
    }
}
_______________________________________________
# no of provinces
class Solution {
    private void dfs(int node, ArrayList<ArrayList<Integer>> adjlt, boolean vis[]){
        vis[node]=true;
        for(Integer lt:adjlt.get(node)){
            if(vis[lt]==false){
                dfs(lt,adjlt,vis);
            }
        }
    }
    public int findCircleNum(int[][] isConnected) {
        //converting adj matrix to dj list
        ArrayList<ArrayList<Integer>> adjlt= new ArrayList<ArrayList<Integer>>();
        int n=isConnected.length;
        for(int i=0;i<n;i++){
            adjlt.add(new ArrayList<Integer>());
        }
        for(int i=0;i<n;i++){
            for (int j=0;j<n;j++){
                if(isConnected[i][j]==1 && i!=j){
                    adjlt.get(i).add(j);
                    // adjlt.get(j).add(i);
                }
            }
        }
        boolean vis[] =new boolean[n];
        //vis[0]=true;
        int c=0;
        for(int i=0;i<n;i++){
            if(vis[i]==false){
                c++;
                dfs(i,adjlt,vis);
            }
        }
        return c;
    }
}
time: O(N) + O(V+2E), Where O(N) is for outer loop and inner loop runs in total a single DFS over entire graph, and we know DFS takes a time of O(V+2E). 
Space Complexity: O(N) + O(N),Space for recursion stack space and visited array.

________________________________________________
#rotten oranges
import java.util.*;
class TUF{
public static int orangesRotting(int[][] grid) {
        if(grid == null || grid.length == 0) return 0;
        int rows = grid.length;
        int cols = grid[0].length;
        Queue<int[]> queue = new LinkedList<>();
        int count_fresh = 0;
        //Put the position of all rotten oranges in queue
        //count the number of fresh oranges
        for(int i = 0 ; i < rows ; i++) {
            for(int j = 0 ; j < cols ; j++) {
                if(grid[i][j] == 2) {
                    queue.offer(new int[]{i , j});
                }
                if(grid[i][j] != 0) {
                    count_fresh++;
                }
            }
        }
       
        if(count_fresh == 0) return 0;
        int countMin = 0, cnt = 0;
        int dx[] = {0, 0, 1, -1};
        int dy[] = {1, -1, 0, 0};
        
        //bfs starting from initially rotten oranges
        while(!queue.isEmpty()) {
            int size = queue.size();
            cnt += size; 
            for(int i = 0 ; i < size ; i++) {
                int[] point = queue.poll();
                for(int j = 0;j<4;j++) {
                    int x = point[0] + dx[j];
                    int y = point[1] + dy[j];
                    
                    if(x < 0 || y < 0 || x >= rows || y >= cols || grid[x][y] == 0 || 
                    grid[x][y] == 2) continue;
                    
                    grid[x][y] = 2;
                    queue.offer(new int[]{x , y});
                }
            }
            if(queue.size() != 0) {
                countMin++;
            }
        }
        return count_fresh == cnt ? countMin : -1;
    }
    public static void main(String args[])
    {
        int arr[][]={ {2,1,1} , {1,1,0} , {0,1,1} };
        int rotting = orangesRotting(arr);
        System.out.println("Minimum Number of Minutes Required "+rotting);
    }
}
Time Complexity: O ( n x n ) x 4    

Reason: Worst-case – We will be making each fresh orange rotten in the grid and for each rotten orange will check in 4 directions

Space Complexity: O ( n x n )

Reason: worst-case –  If all oranges are Rotten, we will end up pushing all rotten oranges into the Queue data structure
______________________________________________________________________
#flood fill
# no of enclaves Number of Enclaves
Problem Statement: You are given an N x M binary matrix grid, where 0 represents a sea cell and 1 represents a land cell. 
A move consists of walking from one land cell to another adjacent (4-directionally) land cell or walking off the boundary of the grid. 
Find the number of land cells in the grid for which we cannot walk off the boundary of the grid in any number of moves.
-------------------------------------------------------------------
class Solution {
    private void dfs(int row,int col,int[][] image, int[][] matrix, int delr[], int delc[], int color, int oc){
        matrix[row][col]=color;
        int r=image.length;
        int c= image[0].length;
        for(int i=0;i<4;i++){
            int nrow=row+delr[i];
            int ncol=col+delc[i];
            if(nrow>=0 && ncol>=0 && nrow<r && ncol<c && image[nrow][ncol]==oc && matrix[nrow][ncol]!=color){
                dfs(nrow,ncol,image,matrix,delr,delc,color,oc);
            }
        }
    }
    public int[][] floodFill(int[][] image, int sr, int sc, int color) {
        int matrix[][]=image;
        int delr[]={-1,0,1,0};
        int delc[]={0,1,0,-1};
        int oc=image[sr][sc];
        dfs(sr,sc,image,matrix,delr,delc,color,oc);
        return matrix;
    }
}
Time Complexity: O(NxM + NxMx4) ~ O(N x M)

For the worst case, all of the pixels will have the same colour, so DFS function will be called for (N x M) nodes and for every node we are traversing for 4 neighbours, so it will take O(N x M x 4) time.

Space Complexity: O(N x M) + O(N x M)

O(N x M) for copied input array and recursive stack space takes up N x M locations at max. 
________________________________________________________________________________
# no of distinct islands. the islands can also be diagonally connected i.e in 8 directions in total
class Solution {
    private void bfs(int ro, int co, int[][] vis, char[][] grid) {
      vis[ro][co] = 1; 
      Queue<Pair> q = new LinkedList<Pair>();
      q.add(new Pair(ro, co)); 
      int n = grid.length; 
      int m = grid[0].length; 
      
      // until the queue becomes empty
      while(!q.isEmpty()) {
          int row = q.peek().first; 
          int col = q.peek().second; 
          q.remove(); 
          
          // traverse in the neighbours and mark them if its a land 
          for(int delrow = -1; delrow<=1;delrow++) {
              for(int delcol = -1; delcol <= 1; delcol++) {
                  int nrow = row + delrow; 
                  int ncol = col + delcol; 
          // check if neighbour row and column is valid, and is an unvisited land
                  if(nrow >= 0 && nrow < n && ncol >= 0 && ncol < m 
                  && grid[nrow][ncol] == '1' && vis[nrow][ncol] == 0) {
                      vis[nrow][ncol] = 1; 
                      q.add(new Pair(nrow, ncol)); 
                  }
              }
          }
      }
  }

    // Function to find the number of islands.
    public int numIslands(char[][] grid) {
        int n = grid.length; 
        int m = grid[0].length; 
        int[][] vis = new int[n][m];
        int cnt = 0; 
        for(int row = 0; row < n ; row++) {
            for(int col = 0; col < m ;col++) {
                // if not visited and is a land
                if(vis[row][col] == 0 && grid[row][col] == '1') {
                    cnt++; 
                    bfs(row, col, vis, grid); 
                }
            }
        }
        return cnt; 
    }
Time Complexity ~ O(N² + NxMx9)= [N²] for the nested loops, and NxMx9 for the overall DFS of the matrix, that will happen throughout if all the cells are filled with 1.
Space Complexity: O(N²) for visited array max queue space O(N²), If all are marked as 1 then the maximum queue space will be N².
______________________________________________________________________
# bipartite

class Solution
{
    private boolean dfs(int node, int col, int color[], 
    ArrayList<ArrayList<Integer>>adj) {
        
        color[node] = col; 
        
        // traverse adjacent nodes
        for(int it : adj.get(node)) {
            // if uncoloured
            if(color[it] == -1) {
                if(dfs(it, 1 - col, color, adj) == false) return false; 
            }
            // if previously coloured and have the same colour
            else if(color[it] == col) {
                return false; 
            }
        }
        
        return true; 
    }
    public boolean isBipartite(int V, ArrayList<ArrayList<Integer>>adj)
    {
        int color[] = new int[V];
	    for(int i = 0;i<V;i++) color[i] = -1; 
	    
	    // for connected components
	    for(int i = 0;i<V;i++) {
	        if(color[i] == -1) {
	            if(dfs(i, 0, color, adj) == false) return false; 
	        }
	    }
	    return true; 
    }
     public static void main(String[] args)
    {
        // V = 4, E = 4
        ArrayList < ArrayList < Integer >> adj = new ArrayList < > ();
        for (int i = 0; i < 4; i++) {
            adj.add(new ArrayList < > ());
        }
        adj.get(0).add(2);
        adj.get(2).add(0);
        adj.get(0).add(3);
        adj.get(3).add(0);
        adj.get(1).add(3);
        adj.get(3).add(1);
        adj.get(2).add(3);
        adj.get(3).add(2);

        Solution obj = new Solution();
        boolean ans = obj.isBipartite(4, adj);
        if(ans)
            System.out.println("1");
        else System.out.println("0");
    }

}
time: O(v+2e)
space: O(3v)
________________________________________________________________
# detect cycle in directed graph
class Solution {
    private boolean dfsCheck(int node, ArrayList<ArrayList<Integer>> adj, int vis[], int pathVis[]) {
        vis[node] = 1; 
        pathVis[node] = 1; 
        
        // traverse for adjacent nodes 
        for(int it : adj.get(node)) {
            // when the node is not visited 
            if(vis[it] == 0) {
                if(dfsCheck(it, adj, vis, pathVis) == true) 
                    return true; 
            }
            // if the node has been previously visited
            // but it has to be visited on the same path 
            else if(pathVis[it] == 1) {
                return true; 
            }
        }
        
        pathVis[node] = 0; 
        return false; 
    }

    // Function to detect cycle in a directed graph.
    public boolean isCyclic(int V, ArrayList<ArrayList<Integer>> adj) {
        int vis[] = new int[V];
        int pathVis[] = new int[V];
        
        for(int i = 0;i<V;i++) {
            if(vis[i] == 0) {
                if(dfsCheck(i, adj, vis, pathVis) == true) return true; 
            }
        }
        return false; 
    }
}
time: O(v+2e)
space: O(N)
__________________________________________________________
//dfs complete code
import java.util.*;
class Solution {
    
    public static void dfs(int node, boolean vis[], ArrayList<ArrayList<Integer>> adj, 
    ArrayList<Integer> ls) {
        
        //marking current node as visited
        vis[node] = true;
        ls.add(node);
        
        //getting neighbour nodes
        for(Integer it: adj.get(node)) {
            if(vis[it] == false) {
                dfs(it, vis, adj, ls);
            }
        }
    }
    // Function to return a list containing the DFS traversal of the graph.
    public ArrayList<Integer> dfsOfGraph(int V, ArrayList<ArrayList<Integer>> adj) {
        //boolean array to keep track of visited vertices
        boolean vis[] = new boolean[V+1];
        vis[0] = true; 
        ArrayList<Integer> ls = new ArrayList<>();
        dfs(0, vis, adj, ls); 
        return ls; 
    }
    
    public static void main(String args[]) {

        ArrayList < ArrayList < Integer >> adj = new ArrayList < > ();
        for (int i = 0; i < 5; i++) {
            adj.add(new ArrayList < > ());
        }
        adj.get(0).add(2);
        adj.get(2).add(0);
        adj.get(0).add(1);
        adj.get(1).add(0);
        adj.get(0).add(3);
        adj.get(3).add(0);
        adj.get(2).add(4);
        adj.get(4).add(2);
        
        Solution sl = new Solution(); 
        ArrayList < Integer > ans = sl.dfsOfGraph(5, adj);
        int n = ans.size(); 
        for(int i = 0;i<n;i++) {
            System.out.print(ans.get(i)+" "); 
        }
    }
}
__________________________________________
//bipartite graph or not
class Solution {
    private boolean bfs(Queue<Integer> q, int graph[][],int color[]){
        while(!q.isEmpty()){
            int node=q.peek();
            q.remove();
            for(int i=0;i<graph[node].length;i++){
                if(color[graph[node][i]]==color[node]){
                    return false;
                }
                else if(color[graph[node][i]]==-1){
                    if(color[node]==0){
                        color[graph[node][i]]=1;
                        q.add(graph[node][i]);
                    }
                    else{
                        color[graph[node][i]]=0;
                        q.add(graph[node][i]);
                    }
                }
            }
        }
        return true;
    }
    public boolean isBipartite(int[][] graph) {
        //graph=[[1,2,3],[0,2],[0,1,3],[0,2]];
        int n=graph.length;
        int color[]=new int[n];
        for(int i=0;i<n;i++){color[i]=-1;}
        Queue<Integer> q = new LinkedList<Integer>();
        for(int i=0;i<n;i++){
            if(color[i]==-1){
                q.add(i);
                color[i]=0;
                if(bfs(q,graph,color)==false){
                    return false;
                }
            }
        }
        return true;
    }
}
________________________________________
//detecting cycle in an indirected graph using bfs

class Solution{
   static boolean checkForCycle(ArrayList<ArrayList<Integer>> adj, int s,
            boolean vis[], int parent[])
    {
       Queue<Node> q =  new LinkedList<>(); //BFS
       q.add(new Node(s, -1));
       vis[s] =true;
       
       // until the queue is empty
       while(!q.isEmpty())
       {
           // source node and its parent node
           int node = q.peek().first;
           int par = q.peek().second;
           q.remove(); 
           
           // go to all the adjacent nodes
           for(Integer it: adj.get(node))
           {
               if(vis[it]==false)  
               {
                   q.add(new Node(it, node));
                   vis[it] = true; 
               }
                // if adjacent node is visited and is not its own parent node
               else if(par != it) return true;
           }
       }
       return false;
    }

    // function to detect cycle in an undirected graph
    public boolean isCycle(int V, ArrayList<ArrayList<Integer>> adj)
    {
        boolean vis[] = new boolean[V];
        Arrays.fill(vis,false);
        int parent[] = new int[V];
        Arrays.fill(parent,-1);  
        
        for(int i=0;i<V;i++)
            if(vis[i]==false) 
                if(checkForCycle(adj, i,vis, parent)) 
                    return true;
    
        return false;
    }
    
    public static void main(String[] args)
    {
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < 4; i++) {
            adj.add(new ArrayList < > ());
        }
        adj.get(1).add(2);
        adj.get(2).add(1);
        adj.get(2).add(3);
        adj.get(3).add(2);
                
        Solution obj = new Solution();
        boolean ans = obj.isCycle(4, adj);
        if (ans)
            System.out.println("1");    
        else
            System.out.println("0");
    }
}

class Node {
    int first;
    int second;
    public Node(int first, int second) {
        this.first = first;
        this.second = second; 
    }
}
time: O(2e+v)
space: O(2n)
____________________________________________________
# detect a cycle using dfs
class Solution {
    private boolean dfs(int node, int parent, int vis[], ArrayList<ArrayList<Integer>> 
    adj) {
        vis[node] = 1; 
        // go to all adjacent nodes
        for(int adjacentNode: adj.get(node)) {
            if(vis[adjacentNode]==0) {
                if(dfs(adjacentNode, node, vis, adj) == true) 
                    return true; 
            }
            // if adjacent node is visited and is not its own parent node
            else if(adjacentNode != parent) return true; 
        }
        return false; 
    }
    // Function to detect cycle in an undirected graph.
    public boolean isCycle(int V, ArrayList<ArrayList<Integer>> adj) {
       int vis[] = new int[V]; 
       for(int i = 0;i<V;i++) {
           if(vis[i] == 0) {
               if(dfs(i, -1, vis, adj) == true) return true; 
           }
       }
       return false; 
    }
    public static void main(String[] args)
    {
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < 4; i++) {
            adj.add(new ArrayList < > ());
        }
        adj.get(1).add(2);
        adj.get(2).add(1);
        adj.get(2).add(3);
        adj.get(3).add(2);
                
        Solution obj = new Solution();
        boolean ans = obj.isCycle(4, adj);
        if (ans)
            System.out.println("1");    
        else
            System.out.println("0");
    }

}
time: O(v+2e)
space: O(2n)
_______________________________________________________
# 01 matrix
class pair{
    int row;
    int col;
    int dis;
    pair(int row,int col,int dis){
        this.row=row;
        this.col=col;
        this.dis=dis;
    }
}
class Solution {
    
    public int[][] updateMatrix(int[][] mat) {
        int delr[]={-1,1,0,0};
        int delc[]={0,0,-1,1};
        int n=mat.length;
        int m=mat[0].length;
        int res[][]=new int[n][m];
        boolean vis[][]=new boolean[n][m];
        Queue<pair> q=new LinkedList<>();
        int dis=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(mat[i][j]==0){
                    q.add(new pair(i,j,dis));
                }
            }
        }
        while(!q.isEmpty()){
            int r=q.peek().row;
            int c=q.peek().col;
            int d=q.peek().dis;
            q.remove();
            vis[r][c]=true;
            res[r][c]=d;
            for(int i=0;i<4;i++){
                int R=r+delr[i];
                int C=c+delc[i];
                if(R>=0 && R<n && C>=0 && C<m && mat[R][C]==1 && vis[R][C]==false){
                    vis[R][C]=true;
                    q.add(new pair(R,C,d+1));
                }
            }
        }
        return res;
    }
}
time: O(N*M + 4*N*M)=O(n*m)
space: O(3*N*M)...vis, dis,queue
_____________________________________________________
# surrounded matrix

class Solution {
    public void dfs(int row,int col,boolean vis[][],int delr[],int delc[],int n,int m,char board[][]){
        vis[row][col]=true;
        for(int i=0;i<4;i++){
            int r=row + delr[i];
            int c=col + delc[i];
            if(r>=0 && r<n && c>=0 && c<m && vis[r][c]==false && board[r][c]=='O'){
                dfs(r,c,vis,delr,delc,n,m,board);
            }
        }
    }
    public void solve(char[][] board) {
        int n=board.length;
        int m=board[0].length;
        boolean vis[][]=new boolean[n][m];
        int delr[]={-1,1,0,0};
        int delc[]={0,0,1,-1};
        for(int i=0;i<n;i++){
            if(board[i][0]=='O' && vis[i][0]==false){dfs(i,0,vis,delr,delc,n,m,board);}
            if(board[i][m-1]=='O' && vis[i][m-1]==false){dfs(i,m-1,vis,delr,delc,n,m,board);}
            else{
                vis[i][0]=true;
                vis[i][m-1]=true;
            }
        }
        for(int i=0;i<m;i++){
            if(board[0][i]=='O' && vis[0][i]==false){dfs(0,i,vis,delr,delc,n,m,board);}
            if(board[n-1][i]=='O' && vis[n-1][i]==false){dfs(n-1,i,vis,delr,delc,n,m,board);}
            else{
                vis[0][i]=true;
                vis[n-1][i]=true;
            }
        }
        for(int i=1;i<n-1;i++){
            for(int j=1;j<m-1;j++){
                if(board[i][j]=='O' && vis[i][j]==false){
                    board[i][j]='X';
                    vis[i][j]=true;
                }
            }
        }
    }
}
time: O(N)+O(M)+(4*N*M)=O(N*M)
space: O(n*m)
____________________________________________________
//topological sorting using dfs
class Solution
{
    private static void dfs(int node,int vis[],ArrayList<ArrayList<Integer>> adj,Stack<Integer> s){
        vis[node]=1;
        for(Integer i:adj.get(node)){
            if(vis[i]==0){
                dfs(i,vis,adj,s);
            }
        }
        s.push(node);
    }
    //Function to return list containing vertices in Topological order. 
    static int[] topoSort(int V, ArrayList<ArrayList<Integer>> adj) 
    {
        // add your code here
        int vis[]=new int[V];
        Stack<Integer> s=new Stack<Integer>();
        for(int i=0;i<V;i++){
            if(vis[i]==0){
                dfs(i,vis,adj,s);
            }
        }
        int ans[]=new int[V];
        for(int i=0;i<V;i++){
            ans[i]=s.pop();
        }
        return ans;
    }
}
_________________________________________
//topological sorting using bfs(kahn algo)
class Solution {
    // Function to return list containing vertices in Topological order.
    static int[] topoSort(int V, ArrayList<ArrayList<Integer>> adj) {
        int indegree[] = new int[V];
        for (int i = 0; i < V; i++) {
            for (int it : adj.get(i)) {
                indegree[it]++;
            }
        }

        Queue<Integer> q = new LinkedList<Integer>();
        ;
        for (int i = 0; i < V; i++) {
            if (indegree[i] == 0) {
                q.add(i);
            }
        }

        int topo[] = new int[V];
        int i = 0;
        while (!q.isEmpty()) {
            int node = q.peek();
            q.remove();
            topo[i++] = node;
            // node is in your topo sort
            // so please remove it from the indegree

            for (int it : adj.get(node)) {
                indegree[it]--;
                if (indegree[it] == 0) {
                    q.add(it);
                }
            }
        }

        return topo;
    }
}

public class tUf {
    public static void main(String[] args) {
        int V = 6;
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < V; i++) {
            adj.add(new ArrayList<>());
        }
        adj.get(2).add(3);
        adj.get(3).add(1);
        adj.get(4).add(0);
        adj.get(4).add(1);
        adj.get(5).add(0);
        adj.get(5).add(2);

        int[] ans = Solution.topoSort(V, adj);
        for (int node : ans) {
            System.out.print(node + " ");
        }
        System.out.println("");
    }
}
___________________________________________
//cycle detection in DAG usng bfs
class Solution {
    public boolean isCyclic(int N, ArrayList<ArrayList<Integer>> adj) {
        // int topo[] = new int[N];
        int indegree[] = new int[N];
        for (int i = 0; i < N; i++) {
            for (Integer it : adj.get(i)) {
                indegree[it]++;
            }
        }

        Queue<Integer> q = new LinkedList<Integer>();
        for (int i = 0; i < N; i++) {
            if (indegree[i] == 0) {
                q.add(i);
            }
        }
        int cnt = 0;
        while (!q.isEmpty()) {
            Integer node = q.poll();
            cnt++;
            for (Integer it : adj.get(node)) {
                indegree[it]--;
                if (indegree[it] == 0) {
                    q.add(it);
                }
            }
        }
        if (cnt == N)
            return false;
        return true;
    }
}
time: O(e+v)
space: O(N)
___________________________________________
//dijkastra using priority queue
class pair{
    int node;
    int distance;
    public pair(int distance,int node){
        this.node = node;
        this.distance = distance;
    }
}
class Solution
{
    //Function to find the shortest distance of all the vertices
    //from the source vertex S.
    static int[] dijkstra(int V, ArrayList<ArrayList<ArrayList<Integer>>> adj, int S)
    {
        // Write your code here
        PriorityQueue<pair> q=new PriorityQueue<pair>((x,y)->x.distance - y.node);
        int dis[]=new int[V];
        for(int i=0;i<V;i++){dis[i]=(int)(1e9);}
        dis[S]=0;
        q.add(new pair(0,S));
        while(!q.isEmpty()){
            int d=q.peek().distance;
            int num=q.peek().node;
            q.remove();
            for(int i=0;i<adj.get(num).size();i++){
                int wt=adj.get(num).get(i).get(1);
                int n=adj.get(num).get(i).get(0);
                if(dis[n]>wt+d){
                    dis[n]=wt+d;
                    q.add(new pair(dis[n],n));
                }
            }
        }
        return dis;
    }
}
time comp: ElogV
________________________________________
//bellman ford algo
class Solution {
    static int[] bellman_ford(int V, ArrayList<ArrayList<Integer>> edges, int S) {
        // Write your code here
        int dis[]=new int[V];
        for (int i=0;i<V;i++){
            dis[i]=(int)(1e8);
        }
        dis[S]=0;
        for(int i=0;i<V;i++){
            for(ArrayList<Integer> node: edges){
                int from=node.get(0);
                int to=node.get(1);
                int wt=node.get(2);
                if(dis[from]!=(int)(1e8) && dis[from]+wt<dis[to]){
                    dis[to]=dis[from]+wt;
                }
            }
        }
        for(ArrayList<Integer> node:edges){
            int from=node.get(0);
            int to=node.get(1);
            int wt=node.get(2);
            if(dis[from]!=(int)(1e8) && dis[from]+wt<dis[to]){
                dis[to]=dis[from]+wt;
                int arr[]=new int[1];
                arr[0]=-1;
                return arr;
            }
        }
        return dis;
    }
}
time comp: E*V
cannot be used with self loops
__________________________________________
//floyd warshall algo
class Solution
{
    public void shortest_distance(int[][] matrix)
    {
        // Code here 
        int n=matrix.length;
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(matrix[i][j]==-1){
                    matrix[i][j]=(int)(1e9);
                }
                if(i==j){
                matrix[i][j]=0;
                }
            }
        }
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                for(int k=0;k<n;k++){
                    matrix[j][k]=Math.min(matrix[j][k],matrix[j][i]+matrix[i][k]);
                }
            }
        }
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(matrix[i][j]==(int)(1e9)){
                    matrix[i][j]=-1;
                }
            }
        }
    }
}
can be used in case of self loops
