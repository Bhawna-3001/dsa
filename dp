//climbing stairs
class Solution {
    private int comb(int ind,int arr[]){
        if(ind==0){
            return 1;
        }
        if (ind==1){
            return 1;
        }
        if(arr[ind]!=-1){
            return arr[ind];
        }
        int left=comb(ind-1,arr);
        int right=comb(ind-2,arr);
        return arr[ind]=left+right;
    }
    public int climbStairs(int n) {
        int arr[]=new int[n+1];
        for(int i=0;i<n+1;i++){
            arr[i]=-1;
        }
        int res=comb(n,arr);
        return res;
    }
}
________________________________________
//ninja training

import java.util.*;
class TUF {
    static int ninjaTraining(int n, int[][] points) {


        int prev[] = new int[4];

        prev[0] = Math.max(points[0][1], points[0][2]);
        prev[1] = Math.max(points[0][0], points[0][2]);
        prev[2] = Math.max(points[0][0], points[0][1]);
        prev[3] = Math.max(points[0][0], Math.max(points[0][1], points[0][2]));

        for (int day = 1; day < n; day++) {

            int temp[] = new int[4];
            for (int last = 0; last < 4; last++) {
                temp[last] = 0;
                for (int task = 0; task <= 2; task++) {
                    if (task != last) {
                        temp[last] = Math.max(temp[last], points[day][task] + prev[task]);
                    }
                }
            }

            prev = temp;

        }

        return prev[3];
    }

    public static void main(String args[]) {

        int[][] points = {{10,40,70},
                    {20,50,80},
                    {30,60,90}};

        int n = points.length;
        System.out.println(ninjaTraining(n, points));
    }
}
_____________________________
//count no of different ways to reach from left most point of grid to bottom most point

import java.util.*;

class TUF{
static int countWays(int m, int n){
    int prev[]=new int[n];
    for(int i=0; i<m; i++){
        int temp[]=new int[n];
        for(int j=0; j<n; j++){
            if(i==0 && j==0){
                temp[j]=1;
                continue;
            }
            
            int up=0;
            int left =0;
            
            if(i>0)
                up = prev[j];
            if(j>0)
                left = temp[j-1];
                
            temp[j] = up + left;
        }
        prev = temp;
    }
    
    return prev[n-1];
    
}

public static void main(String args[]) {

  int m=3;
  int n=2;
  
  System.out.println(countWays(m,n));
}
}
